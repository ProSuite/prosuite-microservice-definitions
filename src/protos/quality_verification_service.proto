syntax = "proto3";

/**
 * The quality verification service definition and its associated request and
 * response message types.
 *
 */

package ProSuite.Microservices.Definitions.QA;

import "shared_types.proto";

/**
  * The quality verification service definition.
  */
service QualityVerificationGrpc {

  /**
    * Verifies the quality definied in the data dictionary.
    */
  rpc VerifyQuality(VerificationRequest) returns (stream VerificationResponse) {}
    
  /**
    * Experimental - Verifies the data quality definied in the data dictionary. The data is provided by the client.
    */
  rpc VerifyDataQuality(stream DataVerificationRequest) returns (stream DataVerificationResponse) {}

  /**
    * Verifies the quality using an XML definition instead of accessing the data dictionary.
    */
  rpc VerifyStandaloneXml(StandaloneVerificationRequest) returns (stream StandaloneVerificationResponse) {}
}

/**
  * The request containing the relevant verification parameters.
  */
message VerificationRequest {
  
  /** The work context that determines the workspace, the error datasets and 
    * the data model's datasets. */
  WorkContextMsg work_context = 1;

  /** The quality specification as defined in the data dictionary and optionally 
    * limited to a subset of its quality conditions.
	*/
  QualitySpecificationMsg specification = 2;

  /** Additional parameters such as the verification perimeter and other 
    * miscellaneous settings.
	*/
  VerificationParametersMsg parameters = 3;

  /** The set of gdb features to be tested. */
  repeated .ProSuite.Microservices.Definitions.Shared.GdbObjectMsg features = 5;

  /** The (display) name of the user who requested the verification. */
  string user_name = 6;

  /** The maximum number of desired parallel processing, if resources allow. */
  int32 max_parallel_processing = 7;

  /** The name of the Environment (i.e. the Data Dictionary) containing the 
    * specified work context / specification.
    */
  string environment = 8;
}

/**
  * The request containing the relevant verification parameters together with the data.
  */
message DataVerificationRequest {
	VerificationRequest request = 1;
	GdbData data = 2;
	SchemaMsg schema = 3;
}

/**
  * The request containing the XML definition for a stand alone service.
  */
message StandaloneVerificationRequest {

  /** The quality specification. */
	oneof specification
	{
    /** XML specification (full XML document). */
    XmlQualitySpecificationMsg xml_specification = 1;

    /** A set of conditions. */
    ConditionListSpecificationMsg condition_list_specification = 4;
	}

	/** Additional parameters such as the verification perimeter and other 
    * miscellaneous settings. */
	VerificationParametersMsg parameters = 2;

	/** The output directory. */
  string output_directory = 3;
}

/**
  * The response containing the streamed response messages. The last response 
  * contains the quality verification and the verified perimeter.
  */
message VerificationResponse {

  /** The current status of the verification run. */
  int32 service_call_status = 1;

  /** The current progress of the verification run. */
  VerificationProgressMsg progress = 2;

  /** The list of issues detected since the last response. */
  repeated IssueMsg issues = 3;

  /** In the final response: The quality verification (statistics). */
  QualityVerificationMsg quality_verification = 4;

  /** In the final response: The actual perimeter that was verified. */
  .ProSuite.Microservices.Definitions.Shared.ShapeMsg verified_perimeter = 5;

  /** The list of allowed issues (exceptions) to be deleted. */
  repeated .ProSuite.Microservices.Definitions.Shared.GdbObjRefMsg obsolete_exceptions = 6;
}

/** The response containing the streamed response messages for the VerifyDataQuality service. */
message DataVerificationResponse {

	/** The standard response. */
  VerificationResponse response = 1;

  /** The definition of the data to be provided by the client. */
  DataRequest data_request = 2;

  /** The elements for which the schema shall be provided by the client. */
  SchemaRequest schema_request = 3;
}

/** The response containing the streamed response messages for the stand-alone service. */
message StandaloneVerificationResponse {

  /** The current status of the verification run. */
  int32 service_call_status = 1;

  /** The current log message of the verification run. */
  LogMsg message = 2;

  /** The list of issues detected since the last response. */
  repeated IssueMsg issues = 3;
}

// ----------------------------------------------------------------------------
// Request Details
// ----------------------------------------------------------------------------

/**
  * The work context determines the workspace to be verified. Additionally, a 
  * specific work context type from the data dictionary could be used for extra 
  * functionality.
  */
message WorkContextMsg {
  
  /** The data dictionary id of the work context. */
  int32 ddx_id = 1;

  /**
    * The type of the work context. 
	* 1 = project (model)
	* 2 = release cycle (not yet supported)
	* 3 = work unit
	* 4 = import_unit (not yet supported)
	*/
  int32 type = 2;
  
  // TODO: connection string?

  /** The version name (for type project). */
  string version_name = 6;

  /** The DDX IDs of the datasets to be verified. */
  repeated int32 verified_dataset_ids = 7;
  
  /** The work context type (string representation for display purposes). */
  string context_type = 4;

  /** The work context name (string representation for display purposes). */
  string context_name = 5;
}

/**
  * The quality specification.
  */
message QualitySpecificationMsg {

  /**
    * The base specification referenced by...
    */
  oneof specification {

    /** ...data dictionary id */
    int32 quality_specification_id = 1;  // Data dictionary id

    /**
      * ...or a well-known specification, such as
  	  * 1 = release_quality
      */
    int32 well_known_specification = 2;  // Release quality: 1
  
    /**
      * ...or a XML specification
      */
    int32 xml_specification = 3;
  }

  /**
    * The condition ids that are to be excluded from the base specification.
    */
  repeated int32 excluded_condition_ids = 4;
}

/**
  * A specification based on an XML document.
  */
message XmlQualitySpecificationMsg {

  /** The contents of the XML document which includes datasets, descriptors, 
      conditions and potentially several specifications. */
  string xml = 1;

  /** The name of the specification to be used. */
  string selected_specification_name = 2;

  /** The list of data source replacements encoded in the format:
    * WorkspaceId | WorkspaceCatalogPath
    */
  repeated string data_source_replacements = 3;
}

/**
  * A specification based on a list of conditions.
  */
message ConditionListSpecificationMsg {

  /** The name of the specification. */
  string name = 1;

  /** The description of the specification. */
  string description = 2;

  /** The elements with the conditions. */
  repeated QualitySpecificationElementMsg elements = 3;

  /** The list of data source replacements encoded in the format:
    * WorkspaceId > WorkspaceCatalogPath
    */
  repeated DataSourceMsg data_sources = 4;
}

/**
  * A data source definition for a model.
  */
message DataSourceMsg {

	/** The workspace id as it is referenced by the xml dataset parameter. */
  string id = 1;

  /** The workspace catalog path. */
  string catalog_path = 2;

  /** The model name. */
  string model_name = 3;

  /** The database (catalog), as used by sql server and postgresql*/
  string database = 4;

  /** The database owner (for enterprise databases) */
  string schema_owner = 5;
}

/**
  * A single element of a quality specification.
  */
message QualitySpecificationElementMsg {

  /** The quality condition. The referenced test
      descriptor must be in the form <class name>(<consturctor id>). */
  QualityConditionMsg condition = 1;

  /** Whether errors are allowed (a.k.a. 'soft errors' or 'warnings). */
  bool allow_errors = 2;

  /** Whether no further tests shall be executed on this row if an error is found. */
  bool stop_on_error = 3;

  /** The name of the condition's category. */
  string category_name = 5;
}

/**
  * A single quality condition.
  */
message QualityConditionMsg {

  /** The optional id of the condition. This will be relevant once single 
    * conditions of a DDX specification can be replaced by an XML condition.
    */
  int32 condition_id = 1;

	/** The name of the condition. */
	string name = 2;

	/** The name of the test descriptor in the form <class name>(<consturctor id>). */
	string test_descriptor_name = 3;

	/** An optional url. */
	string url = 4;

	/** The optional description.
    */
	string description = 5;
    
	/** The condition's parameters. */
	repeated ParameterMsg parameters = 6;
}

/**
  * A quality condition parameter
  */
message ParameterMsg {

	/** Name of the parameter. */
	string name = 1;

	/** The parameter value. */
	string value = 2;

	/** For dataset parameters: an optional where clause. */
	string where_clause = 3;

	/** For dataset parameters: The workspace id.
    */
	string workspace_id = 4;

	/** For dataset parameters: Whether the dataset is only used as reference. */
	bool used_as_reference_data = 5;
}

/**
  * Additional parameters such as the verification perimeter and other 
  * miscellaneous and advanced verification parameters.
  */
message VerificationParametersMsg {
  
  /** The optional verification tile size */
  double tile_size = 1;

  /** The mostly required verification perimeter (envelope or polygon). */
  .ProSuite.Microservices.Definitions.Shared.ShapeMsg perimeter = 2;

  /** Whether a detailed verification report shall be created. */
  bool write_detailed_verification_report = 3;

  /** The path of the detailed verification report. */
  string verification_report_path = 4;
  
  /** Whether a html verification report shall be created. */
  string html_report_path = 5;

  /** The path of the html verification report. */
  string html_template_path = 6;
  
  /** The path of the issue file GDB, if desired. */
  string issue_file_gdb_path = 7;

  /** Whether the issues should be stored with the geometry of related features. */  
  bool store_related_geometry_for_table_row_issues = 8;

  /** Whether 'Filter to perimeter by geometry of related feature' is true. */
  bool filter_table_rows_using_related_geometry = 9;
  
  /** Whether allowed errors should be overridden (repoart all errors). */
  bool override_allowed_errors = 10;
  
  /** Whether issues outside the specified perimeter shall be reported. */
  bool report_issues_outside_perimeter = 11;
  
  /** Process all rows for non-container tests. */
  bool force_full_scan_for_non_container_tests = 12;

  /** Whether the verification should be saved in the data dictionary. */
  bool save_verification_statistics = 13;

  /** Whether stored exceptions (allowed errors) that were not found should be
    * returned to the caller via obsolete_exceptions to allow for deletion of 
	* said objects.
	*/
  bool report_unused_exceptions = 14;

  /** Whether stored exceptions (allowed errors) that are considered invalid
    * (e.g. because the condition or the object chagned) should be returned 
	* to the caller via obsolete_exceptions to allow for deletion of said 
	* objects.
	*/
  bool report_invalid_exceptions = 15;

  /** Invalidation if an involved object changed since the error was allowed. */
  bool invalidate_exceptions_if_any_involved_object_changed = 16;

  /** Invalidation if the condition changed since the error was allowed. */
  bool invalidate_exceptions_if_condition_was_updated = 17;
}

/**
  * The response for a DataRequest, submitting gdb objects or object counts for
  * a specific object class.
  */
message GdbData {
  
	/** The object count (if requested). */
	int32 gdb_object_count = 4;

	/** The gdb objects (if requested). */
	repeated .ProSuite.Microservices.Definitions.Shared.GdbObjectMsg gdb_objects = 3;
}

/**
  * The request for more data to be sent by the remote peer (client), for a 
  * specific object class or (relationship-class-based) query.
  */
message DataRequest {
	
	/** The table or query for which additional objects are requested. */
  oneof table
  {
    ClassDef class_def = 1;

    RelationshipClassQuery rel_query_def = 2;
  }

  /** The where clause. */
	string where_clause = 3;

  /** The intersecting search geometry. */
	.ProSuite.Microservices.Definitions.Shared.ShapeMsg search_geometry = 4;

  /** The subfields to be provided for a data query. */
	string sub_fields = 5;

  /** Whether only the object count is being requested and the objects shall 
    * be ommited in the result.
    */
	bool count_only = 6;
}

/**
  * A unique definition of an object class. In general, the model id is used 
  * as the workspace_handle and the object class id as the class handle.
  */
message ClassDef {

	/** The unique identification of the object class (the object class ID). */
	int64 class_handle = 1;

	/** The unique identification of the workspace (the ddx model ID). */
	int64 workspace_handle = 2;
}

/**
  * A unique definition of a query table that is based on a relationship class. 
  */
message RelationshipClassQuery {
  
	/** The name of the relationship class. */
  string relationship_class_name = 1;

  /** The unique identification of the workspace (the ddx model ID). */
  int64 workspace_handle = 2;

  /** The tables to be joined (and which must participate in the relationship). */
  repeated string tables = 3;

  /** The join type corresponding to the JoinType enum:
	* 1 = InnerJoin
	* 2 = LeftJoin
	* 3 = RightJoin
	*/
  int32 join_type = 4;

  /** The optional where clause. */
  string where_clause = 5;
}

/**
  * The response for a SchemaRequest, submitting object class definitions or a
  * query table definition.
  */
message SchemaMsg {
  
	/** The object class details referenced by the class_handle of the gdb_objects. */
	repeated .ProSuite.Microservices.Definitions.Shared.ObjectClassMsg class_definitions = 1;

	/** The relationship class details referenced by the class_handle of the gdb_objects. */
	repeated .ProSuite.Microservices.Definitions.Shared.ObjectClassMsg relclass_definitions = 2;
}

/**
  * The request for schema information to be sent by the remote peer (client).
  * Currently the request must either consist of a list of dataset ddx IDs or
  * a (relationship-class-based) query.
  */
message SchemaRequest {
	
	/** The ddx dataset IDs for the requested object classes. */
	repeated int32 dataset_ids = 1;

	/** The query definition of the requested query table. */
	repeated RelationshipClassQuery relationship_class_queries = 2;
}

// ----------------------------------------------------------------------------
// Response Details
// ----------------------------------------------------------------------------

/**
  * The progress message that will be streamed during a lengthy verification.
  */
message VerificationProgressMsg {

  /** The progress type, such as container-tests, non-container tests. */
  int32 progress_type = 1;

  /** The progress step, such as DataLoading, TileProcessing, etc. */
  int32 progress_step = 2;
  
  /** The overall total progress step count. */
  int32 overall_progress_total_steps = 3;

  /** The overall total progress current step. */
  int32 overall_progress_current_step = 4;

  /** The detailed progress step count. */
  int32 detailed_progress_total_steps = 5;

  /** The detailed total progress current step. */
  int32 detailed_progress__current_step = 6;
  
  /** The detailed progress message. */
  string processing_step_message = 7;
  
  /** The current step's envelope (during the container tests phase). */
  .ProSuite.Microservices.Definitions.Shared.EnvelopeMsg current_box = 8;

  /** The total extent of the verification perimeter. */
  .ProSuite.Microservices.Definitions.Shared.EnvelopeMsg total_box = 9;
  
  /** The current message / status information. */
  string message = 10;
}

/**
  * The issue definition. Found issues are streamed to the client together
  * with the current progress. This definition should be sufficient to create 
  * the error features in the client.
  */
message IssueMsg {
	
	/** The violated contition's data dictionary id. */
	int32 condition_id = 1;
	
	/** The issue geometry. */
	.ProSuite.Microservices.Definitions.Shared.ShapeMsg issue_geometry = 2;
	
	/** The issue description. */
	string description = 4;

	/** The issue code. */
	string issue_code_id = 5;

	/** The issue code. */
	string issue_code_description = 6;
	
	/** The involved tables with their involved rows. */
	repeated InvolvedTableMsg involved_tables = 7;

	/** The legacy involved rows string representation. */
	string legacy_involved_rows = 8;

	/** Whether it is a 'soft' error that can be allowed. */
	bool allowable = 9;

	/** Whether the violated condition is used as a stop condition. */
	bool stop_condition = 10;

	/** The affected component. */
	string affected_component = 11;

	/** The creation date/time in local time, represented as ticks. */
	int64 creation_date_time_ticks = 12;

	/** The violated test index. */
	int32 test = 13;

	// TODO: some tests can write extra object values. Add name/value pair list.
}

/**
  * The involved gdb objects (to be written issue-gdb-style).
  */
message InvolvedTableMsg {
  
  /** The table name (as opposed to the dataset name used by the legacy format).
    */
  string table_name = 1;

  /** The list of objectIDs. */
  repeated int32 object_ids = 2;
}

/**
  * The quality verification (statistics). Contains the neccessary information 
  * to re-create ProSuite's QualityVerification object.
  * This is only part of the last response.
  */
message QualityVerificationMsg {

  /** The data dictionary id, if the quality verification was saved. See 
    * <VerificationParametersMsg.save_verification_statistics/> 
    */
  int32 saved_verification_id = 1;

  /** The verified quality specification's data dictionary id. */
  int32 specification_id = 2;

  /** The verified quality specification's name. */
  string specification_name = 3;

  /** The verified quality specification's description. */
  string specification_description = 4;

  /** The user who requested the verification. */
  string user_name = 5;
  
  /** The verification's start date/time in ticks (local time). */
  int64 start_time_ticks = 6;

  /** The verification's end date/time in ticks (local time). */
  int64 end_time_ticks = 7;

  /** Whether or not the specification was fulfilled. */
  bool fulfilled = 8;

  /** Whether or not the verification was cancelled. */
  bool cancelled = 9;

  /** The verification run's processor time. */
  double processor_time_seconds = 10;
  
  /** The work context type (string representation for display purposes). */
  string context_type = 11;

  /** The work context name (string representation for display purposes). */
  string context_name = 12;
  
  /** The number of rows with stop conditions. */
  int32 rows_with_stop_conditions = 13;
  
  /** The list of condition verifications. */
  repeated QualityConditionVerificationMsg condition_verifications = 14;

  /** The list of verification datasets. */
  repeated QualityVerificationDatasetMsg verification_datasets = 15;
}

/**
  * The quality condition verification corresponding to a single condition.
  * This is the wire format for ProSuite's QualityConditionVerification class.
  * It is the main constituent of the quality verification.
  */
message QualityConditionVerificationMsg {

  /** The quality condition's data dictionary id. */
  int32 quality_condition_id = 1;

  /** The data dictionary id of the stop condition. */
  int32 stop_condition_id = 2;

  /** Whether or not the condition was fulfilled. */
  bool fulfilled = 3;

  /** The error count for this condition. */
  int32 error_count = 4;

  /** The error count for this condition. */
  double execute_time = 5;

  /** The execution time processing rows by this condition [s]. */
  double row_execute_time = 6;

  /** The execution time completing tiles for this condition [s]. */
  double tile_execute_time = 7;
}

/**
  * The quality condition verification datasets.
  * This is the wire format for ProSuite's QualityVerificationDataset class.
  * It is the secondary constituent of the quality verification.
  */
message QualityVerificationDatasetMsg {
  
  /** The dataset's data dictionary id. */
  int32 dataset_id = 1;

  /** The load time for this dataset [s]. */
  double load_time = 2;
}

/**
  * A simple progress message wrapping a log entry to be streamed during a lengthy process.
  */
message LogMsg {

	/** The detailed progress message. */
	string message = 3;

    /** The (log4net) progress message level. A few examples:
	  * Fatal = 110000
	  * Error = 70000
	  * Warn = 60000
	  * Info = 40000
	  * Debug = 30000
	  * Verbose = 10000
	  */
	int32 message_level = 4;
}