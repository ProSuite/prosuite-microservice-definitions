syntax = "proto3";

/**
 * The quality verification service definition and its associated request and
 * response message types.
 *
 */

package ProSuite.Microservices.Definitions.QA;

import "shared_gdb.proto";
import "shared_qa.proto";

/**
  * The quality verification service definition.
  */
service QualityVerificationGrpc {

  /**
    * Verifies the quality definied in the data dictionary.
    */
  rpc VerifyQuality(VerificationRequest) returns (stream VerificationResponse) {}

  /**
    * Experimental - Verifies the data quality definied in the data dictionary. The data is provided by the client.
    */
  rpc VerifyDataQuality(stream DataVerificationRequest) returns (stream DataVerificationResponse) {}

  /**
    * Verifies the quality using an XML definition instead of accessing the data dictionary.
	* This is a simplified interface with a basic response and no parallelism. Consider using
	* VerifyQuality instead.
    */
  rpc VerifyStandaloneXml(StandaloneVerificationRequest) returns (stream StandaloneVerificationResponse) {}

  rpc QueryData(QueryDataRequest) returns (stream QueryDataResponse) {}
}

/**
  * The request containing the relevant verification parameters.
  */
message VerificationRequest {

  /** The work context that determines the workspace, the error datasets and 
    * the data model's datasets. Can be null in case of stand-alone verification
	* e.g. for XML or condition-list specifications.
	*/
  WorkContextMsg work_context = 1;

  /** The quality specification as defined in the data dictionary and optionally 
    * limited to a subset of its quality conditions.
	*/
  QualitySpecificationMsg specification = 2;

  /** Additional parameters such as the verification perimeter and other 
    * miscellaneous settings.
	*/
  VerificationParametersMsg parameters = 3;

  /** The set of gdb features to be tested. */
  repeated .ProSuite.Microservices.Definitions.Shared.Gdb.GdbObjectMsg features = 5;

  /** The (display) name of the user who requested the verification. */
  string user_name = 6;

  /** The maximum number of desired parallel processing, if resources allow. */
  int32 max_parallel_processing = 7;

  /** The name of the Environment (i.e. the Data Dictionary) containing the 
    * specified work context / specification.
    */
  string environment = 8;
}

/**
  * The request containing the relevant verification parameters together with the data.
  */
message DataVerificationRequest {

  VerificationRequest request = 1;

  GdbData data = 2;

  SchemaMsg schema = 3;

  /** The error message (if any) regarding data or schema provision. */
  string error_message = 5;
}

message QueryDataRequest {

  /** The list of data sources (i.e. workspaces) referenced by the transformer. */
  repeated DataSourceMsg data_sources = 1;

  /** The schema information for the datasets referenced by the transformer. */
  SchemaMsg schema = 2;

  /** The transformer configuration referenced by the data request. */
  InstanceConfigurationMsg transformer = 3;

  /** The data request containing the query details. */
  DataRequest data_request = 4;

  /** The (display) name of the user who requested the verification. */
  string user_name = 5;
}

/**
  * The request containing the XML definition for a stand alone service.
  */
message StandaloneVerificationRequest {

  /** The quality specification. */
  oneof specification	{

    /** XML specification (full XML document). */
    XmlQualitySpecificationMsg xml_specification = 1;

    /** A set of conditions. */
    ConditionListSpecificationMsg condition_list_specification = 4;
  }

  /** Additional parameters such as the verification perimeter and other 
  * miscellaneous settings. */
  VerificationParametersMsg parameters = 2;

  /** The output directory. */
  string output_directory = 3;

  /** The (display) name of the user who requested the verification. */
  string user_name = 6;
}

/**
  * The response containing the streamed response messages. The last response 
  * contains the quality verification and the verified perimeter.
  */
message VerificationResponse {

  /** The current status of the verification run. */
  int32 service_call_status = 1;

  /** The current progress of the verification run. */
  VerificationProgressMsg progress = 2;

  /** The list of issues detected since the last response. */
  repeated IssueMsg issues = 3;

  /** In the final response: The quality verification (statistics). */
  QualityVerificationMsg quality_verification = 4;

  /** In the final response: The actual perimeter that was verified. */
  .ProSuite.Microservices.Definitions.Shared.Gdb.ShapeMsg verified_perimeter = 5;

  /** The list of allowed issues (exceptions) to be deleted. */
  repeated .ProSuite.Microservices.Definitions.Shared.Gdb.GdbObjRefMsg obsolete_exceptions = 6;
}

/** The response containing the streamed response messages for the VerifyDataQuality service. */
message DataVerificationResponse {

	/** The standard response. */
  VerificationResponse response = 1;

  /** The definition of the data to be provided by the client. */
  DataRequest data_request = 2;

  /** The elements for which the schema shall be provided by the client. */
  SchemaRequest schema_request = 3;
}

/** The response containing the streamed response messages for the stand-alone service. */
message StandaloneVerificationResponse {

  /** The current status of the verification run. */
  int32 service_call_status = 1;

  /** The current log message of the verification run. */
  LogMsg message = 2;

  /** The list of issues detected since the last response. */
  repeated IssueMsg issues = 3;
}

message QueryDataResponse {

  /** The current status of the query run. */
  int32 service_call_status = 1;

  /** The result data. */
  GdbData data = 2;

  /** A log message in case there was an error. */
  LogMsg message = 3;

}
