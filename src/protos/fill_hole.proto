syntax = "proto3";

/**
 * The fill/remove hole service definitions and its associated request and 
 * response message types.
 *
 */

package ProSuite.Microservices.Definitions.Geometry;

import "shared_types.proto";

/**
  * The fillable or removable hole calculation service definition.
  */
service FillHolesGrpc {

  /**
    * The calculation of holes and boundary loops in one or more features.
    */
  rpc CalculateHoles(CalculateHolesRequest) returns (CalculateHolesResponse) {}
}

/**
  * The overlaps calculation request.
  */
message CalculateHolesRequest {

  /** The set of source features from which the overlaps shall be removed. */
  repeated .ProSuite.Microservices.Definitions.Shared.Gdb.GdbObjectMsg source_features = 1;

  /** The object class details referenced by the class_handle of the above GdbObjectMsg objects. */
  repeated .ProSuite.Microservices.Definitions.Shared.Gdb.ObjectClassMsg class_definitions = 2;

  /** The visible extent(s) to be used to restrict the hole calculation. */
  repeated .ProSuite.Microservices.Definitions.Shared.Gdb.EnvelopeMsg visible_extents = 3;

  /** Whether the union of the source features shall be evaluated for holes or 
    * each feature individually.
    */
  bool union_features = 4;
}

/**
  * The overlaps calculation response.
  */
message CalculateHolesResponse {

  /** The result hole geometries (polygons). */
  repeated HolesMsg holes = 1;

  /** Notifications that might relevant to the user. */
  repeated string notifications = 2;
}

/**
  * A set of overlaps associated with a specific source feature.
  */
message HolesMsg {

	/** The result overlap geometries (polygons or polylines) in the same 
    * spatial reference as the original feature.  
    */
	repeated .ProSuite.Microservices.Definitions.Shared.Gdb.ShapeMsg hole_geometries = 1;

	/** A reference to the original feature that contains the hole(s). Null, if 
      * the source features have been unioned.
      */
	.ProSuite.Microservices.Definitions.Shared.Gdb.GdbObjRefMsg original_feature_ref = 2;
}
